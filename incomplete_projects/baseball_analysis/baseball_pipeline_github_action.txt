
# Python Pipeline Auto-Testing GitHub Action Workflow

## 1. GitHub Action Workflow (`python-pipeline.yml`)

```yaml
name: Python Pipeline Auto-Testing

on:
  push:
    branches:
      - main        # Runs on pushes to the main branch
  pull_request:
    branches:
      - main        # Runs on pull requests targeting the main branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Set up Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Lint code (Optional, but highly recommended)
    - name: Lint with pylint
      run: |
        pip install pylint
        pylint src/ --disable=R,C  # Lint the src directory (can modify as needed)

    # Run tests (you'll need to add tests in your project)
    - name: Run tests
      run: |
        pytest tests/  # Assuming you have tests in a 'tests' directory

    # Deploy Streamlit app (Optional)
    # - name: Deploy Streamlit App (Optional)
    #   run: |
    #     streamlit run dashboard/app.py --server.headless true --server.port 8501
    #   env:
    #     STREAMLIT_SECRET: ${{ secrets.STREAMLIT_SECRET_KEY }}  # Streamlit API Key (if needed)
```

---

## 2. Example Test Using **pytest** (`tests/test_clean_data.py`)

```python
import pytest
import pandas as pd
from src.pipeline.clean_data import clean_baseball_data

def test_clean_data():
    # Example data
    data = {
        'player': ['Player1', 'Player2'],
        'team': ['TeamA', 'TeamB'],
        'hr': [20, 15],
        'slg': [0.4, 0.3],
        'obp': [0.35, 0.32],
        'ab': [300, 250]
    }
    df = pd.DataFrame(data)
    
    # Clean the data using the pipeline function
    cleaned_df = clean_baseball_data(df)

    # Check if any missing values exist in critical columns
    assert cleaned_df['player'].notna().all()
    assert cleaned_df['team'].notna().all()
```

---

## 3. GitHub Workflow Setup

- **Step 1**: Create `.github/workflows/python-pipeline.yml` in your project folder.

- **Step 2**: Paste the above YAML content into `python-pipeline.yml`.

- **Step 3**: Create `tests/test_clean_data.py` to include the test provided, or modify to suit your pipeline functions.

- **Step 4**: Commit and push to your GitHub repository:
    ```bash
    git add .github/workflows/python-pipeline.yml
    git commit -m "Add GitHub Actions for auto-testing pipeline"
    git push origin main
    ```

---

## 4. Monitoring the Workflow

- After pushing, go to the **Actions** tab in your GitHub repository to see the status of the workflow.
- You can view detailed logs, and if tests fail, you'll get insight into where the issue lies.

---

## Optional: Streamlit Deployment

If you wish to deploy your **Streamlit app** after successful tests, uncomment and configure the **Deploy Streamlit App** step in the YAML file.

```yaml
# Deploy Streamlit App (Optional)
- name: Deploy Streamlit App (Optional)
  run: |
    streamlit run dashboard/app.py --server.headless true --server.port 8501
  env:
    STREAMLIT_SECRET: ${{ secrets.STREAMLIT_SECRET_KEY }}  # Streamlit API Key (if needed)
```

Be sure to set up **GitHub Secrets** for sensitive keys like **Streamlit API keys**.

---

## Summary:

This GitHub Actions workflow automates:
- Installation of dependencies
- Linting of the code
- Running unit tests on your pipeline
- (Optional) Deploying the Streamlit app

---

## Notes:
- Ensure you have all dependencies listed in `requirements.txt`.
- The workflow runs on each **push** to `main` and on **pull requests**.
- Add more tests in the `tests/` directory as your project grows.

